import {
    Grid,
    Typography,
} from "@mui/material";

import SubCard from "components/elements/cards/SubCard";
import CodeSlices from "./codes/CodeSlices";
import CodeStore from "./codes/CodeStore";
import CodeHooks from "./codes/CodeHooks";

const ReduxTypes: React.FC = () =>
{
    return(
        <Grid item xs={12} sx={{my:2}} >
            <Grid container spacing={2}>
                <Grid item md={12} xs={12}>
                    <SubCard title='RTK Store üî¥'>
                        <Typography variant='body1'>
                            Le Store est l'endroit o√π tous les √©tats seront d√©pos√©s.
                            De cette fa√ßon, toutes les composantes sont capables de questionner le Store ainsi que d'activer une action qui modifiera son √©tat.
                            On passe en param√®tre tous les reducers lors de la cr√©ation du Store.
                        </Typography>
                        <CodeStore />
                    </SubCard>
                </Grid>
                <Grid item md={6} xs={12}>
                    <SubCard title='RTK Store üî¥'>
                        <Typography variant='body1'>
                            Le Store est l'endroit o√π tous les √©tats seront d√©pos√©s.
                            De cette fa√ßon, toutes les composantes sont capables de questionner le Store ainsi que d'activer une action qui modifiera son √©tat.
                            On passe en param√®tre tous les reducers lors de la cr√©ation du Store.
                        </Typography>
                        <CodeStore />
                    </SubCard>
                </Grid>
                <Grid item md={6} xs={12}>
                    <SubCard title='RTK Hooks ü™ù'>
                        <Typography variant='body1'>
                            Puisque nous sommes en TypeScript, nous devons d√©clarer de quelle type vont √™tre les hooks. On va placer cette logique dans un fichier hooks.ts.
                            C'est un bon exemple d'Hooks personnalis√©s.
                        </Typography>
                        <CodeHooks />
                    </SubCard>
                </Grid>
                <Grid item md={12} xs={12}>
                    <SubCard title='RTK Reducers ‚úÖ'>
                        <Typography variant='body1'>
                            Les reducers prennent 2 param√®tres, <b>state</b> et <b>action</b>.
                            Le reducer va prendre le state actuel dans le store et le modifier selon le r√©sultat de l'action.
                        </Typography>
                        <Typography variant='body1' sx={{mt:2}}>
                            On retrouve un exemple de reducers dans les slices. Voir l'exemple plus bas. üëá
                        </Typography>
                    </SubCard>
                </Grid>
                <Grid item xs={12}>
                    <SubCard title='RTK Slices üçï'>
                        <Typography variant='body1'>
                            Les Slices sont des fichiers que l'on donne l'√©tat initial et les reducers. Il va ensuite cr√©er automatiquement les <b>cr√©ateurs d'actions</b> ainsi que les <b>types d'actions</b>. ü§ñ
                        </Typography>
                        <CodeSlices />
                    </SubCard>
                </Grid>
            </Grid>
        </Grid>
    )
}


export default ReduxTypes;